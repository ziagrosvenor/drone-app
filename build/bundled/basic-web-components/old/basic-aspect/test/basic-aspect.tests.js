suite("basic-aspect",function(){var e=document.getElementById("container");teardown(function(){e.innerHTML=""}),test("basic-aspect on its own creates its own collective",function(){var e=document.createElement("aspect-one"),t=e.collective;assert.isDefined(t),assert.equal(t.aspects.length,1),assert.equal(t.aspects[0],e)}),test("one basic-aspect can assimilate another",function(){var e=document.createElement("aspect-one"),t=document.createElement("aspect-two");e.assimilate(t);var a=e.collective;assert.equal(a,t.collective),assert.equal(a.aspects.length,2),assert.equal(a.aspects[0],e),assert.equal(a.aspects[1],t)}),test("can invoke collective method on a basic-aspect in a collective",function(){var e=document.createElement("aspect-one"),t=document.createElement("aspect-two");e.assimilate(t),results=[];var a=e.collective;a.method("foo"),assert.deepEqual(results,["foo two","foo one"])}),test("aspect can be applied to multiple classes without interference",function(){var e=document.createElement("aspect-one"),t=document.createElement("aspect-two"),a=document.createElement("aspect-two");e.assimilate(t),assert.equal(a.collective.aspects.length,1),assert.equal(a.collective.aspects[0],a)}),test("aspect can assimilate a contained aspect during ready",function(){var e=document.createElement("aspect-one-wrapper"),t=e.collective;assert.equal(t.aspects.length,2);var a=e.$.inner;assert.equal(t.aspects[0],e),assert.equal(t.aspects[1],a)}),test("aspect with target='child' assimilates its aspect children",function(){var e=document.createElement("two-aspects"),t=e.$.outer,a=e.$.inner,s=t.collective;assert.equal(s.aspects.length,2),assert.equal(s.aspects[0],t),assert.equal(s.aspects[1],a)}),test("aspect assimilates any behaviors which are aspects",function(){var e=document.createElement("component-with-behavior-aspect");assert.equal(e.collective.aspects.length,2),assert.equal(e.collective.message,"Hello")})});