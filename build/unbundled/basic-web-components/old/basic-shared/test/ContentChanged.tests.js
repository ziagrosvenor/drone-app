suite("ContentHelpers and ContentChanged",function(){this.timeout(2e3);var e=document.getElementById("container");teardown(function(){e.innerHTML=""}),test("basic setup",function(t){var n=document.createElement("content-test-element");e.appendChild(n),t()}),test("observe changes in textContent",function(t){var n=document.createElement("content-test-element");n.contentChangedHook=function(){assert.equal(Polymer.dom(n).textContent,"Hello"),t()},e.appendChild(n),flush(function(){Polymer.dom(n).textContent="Hello"})}),test("observe changes in children",function(t){var n=document.createElement("content-test-element");n.contentChangedHook=function(){var e=Polymer.dom(n).children;assert.equal(e.length,1),assert.equal(e[0].textContent,"Hello"),t()},e.appendChild(n),flush(function(){var e=document.createElement("div");e.textContent="Hello",Polymer.dom(n).appendChild(e)})}),test("specifying initial content triggers initial contentChanged",function(t){var n=document.createElement("content-test-element");Polymer.dom(n).textContent="Hello",n.contentChangedHook=function(){assert.equal(Polymer.dom(n).textContent,"Hello"),t()},flush(function(){e.appendChild(n)})}),test("detaching an element stops it observing future content changes",function(t){var n=document.createElement("content-test-element");n.contentChangedHook=function(){var e=Polymer.dom(n).childNodes;assert.equal(e[0].textContent,"Hello"),n.remove(),t()},n.detatchedHook=function(){n.textContent="Goodbye"},e.appendChild(n),Polymer.dom(n).textContent="Hello"}),test("redistributed content triggers contentChanged",function(t){var n=document.createElement("reproject-test"),o=n.$.nestedTestElement;e.appendChild(n),o.contentChangedHook=function(){var e=Polymer.dom(n).childNodes;assert.equal(e[0].textContent,"Hello")},Polymer.dom(n).textContent="Hello",flush(function(){t()})}),test("adding node to shadow does not trigger contentChanged",function(t){var n=document.createElement("content-test-element");n.contentChangedHook=function(){var e=Polymer.dom(n).childNodes;assert.equal(e.length,1),t()},e.appendChild(n),n.$.static.textContent="This should be ignored",flush(function(){Polymer.dom(n).textContent="Hello"})}),test("removing node from shadow does not trigger contentChanged",function(t){var n=document.createElement("content-test-element");n.contentChangedHook=function(){var e=Polymer.dom(n).childNodes;assert.equal(e.length,1),t()},e.appendChild(n),flush(function(){n.$.static.remove(),flush(function(){Polymer.dom(n).textContent="Hello"})})}),test("removing node from light DOM *does* trigger contentChanged",function(t){var n=document.createElement("content-test-element"),o=document.createElement("div");o.textContent="div",Polymer.dom(n).appendChild(o),e.appendChild(n),flush(function(){n.contentChangedHook=function(){var e=Polymer.dom(n).childNodes;assert.equal(e.length,0),t()},Polymer.dom(n).removeChild(o)})}),test.skip("observe changes in child attribute",function(t){var n=document.createElement("content-test-element"),o=document.createElement("button");n.appendChild(o),e.appendChild(n),n.contentChangedHook=function(){assert.isTrue(o.disabled),t()},o.setAttribute("disabled","")}),test.skip("ignore changes in element's own attributes",function(t){var n=document.createElement("content-test-element");n.contentChangedHook=function(){t(new Error("The contentChanged handler was invoked, but shouldn't have been."))},e.appendChild(n),n.sampleAttribute="Hello",setTimeout(t)})});